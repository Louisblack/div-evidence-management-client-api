#!groovy
@Library(value="Infrastructure") _

properties([
        parameters([
                string(name: 'PRODUCT_NAME', defaultValue: 'div', description: 'Divorce'),
                string(name: 'APP', defaultValue: 'em-client-api', description: 'Divorce Evidence Management Client API'),
                string(name: 'TYPE', defaultValue: 'java', description: ''),
                string(name: 'ENVIRONMENT', defaultValue: 'saat', description: 'Environment where code should be built and deployed'),
                choice(name: 'SUBSCRIPTION', choices: 'sandbox\nnonprod\nprod', description: 'Azure subscriptions available to build in')
    ])
])

List<LinkedHashMap<String, Object>> secrets = [
        secret(vaultKeySecretPath((String)env.ENVIRONMENT, "/ccidam/service-auth-provider/api/microservice-keys/divorceCcdSubmission"), 'CASE_PROGRESSION_SERVICE_AUTH_SECRET'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'value',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withParameterizedPipeline(params.TYPE, params.PRODUCT_NAME, params.APP, params.ENVIRONMENT, params.SUBSCRIPTION) {
    after('checkout') {
        env.CNP_ENVIRONMENT = getEnvironment((String)env.ENVIRONMENT)
    }

    loadVaultSecrets(secrets)
}

String getEnvironment(String env){
    if(env == null){
        return "aat"
    }

    return env
}


String vaultKeySecretPath(String env, String secretPathPostFix){
    if(env.toLowerCase().endsWith("prod")){
        return "secret/" + "prod" + secretPathPostFix
    }

    return "secret/" + "test" + secretPathPostFix
}